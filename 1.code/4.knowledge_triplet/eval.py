import tensorflow as tf
import numpy as np
np.random.seed(1234)
import os
import time
import datetime
from builddata import *
from model import ConvKB
# Parameters
# ==================================================
name = "semantic"
data_path = "../resource/input"
model_path = "../result"
embedding_dim = 10
num_filters = 500
learning_rate = 0.0001
batch_size = 128
num_epochs = 200
saveStep = 200

tf.flags.DEFINE_string("data", data_path, "Data sources.")
tf.flags.DEFINE_string("run_folder", model_path, "Data sources.")
tf.flags.DEFINE_string("name", name, "Name of the dataset.")

tf.flags.DEFINE_integer("embedding_dim", embedding_dim, "Dimensionality of character embedding")
tf.flags.DEFINE_string("filter_sizes", "1", "Comma-separated filter sizes")
tf.flags.DEFINE_integer("num_filters", num_filters, "Number of filters per filter size")
tf.flags.DEFINE_float("dropout_keep_prob", 1.0, "Dropout keep probability")
tf.flags.DEFINE_float("l2_reg_lambda", 0.001, "L2 regularization lambda")
tf.flags.DEFINE_float("learning_rate", learning_rate, "Learning rate")
tf.flags.DEFINE_boolean("is_trainable", True, "")
tf.flags.DEFINE_integer("batch_size", batch_size, "Batch Size")
tf.flags.DEFINE_float("neg_ratio", 1.0, "Number of negative triples generated by positive")
tf.flags.DEFINE_boolean("use_pretrained", False, "Using the pretrained embeddings")
tf.flags.DEFINE_integer("num_epochs", num_epochs, "Number of training epochs")
tf.flags.DEFINE_integer("saveStep", saveStep, "")
tf.flags.DEFINE_boolean("allow_soft_placement", True, "Allow device soft device placement")
tf.flags.DEFINE_boolean("log_device_placement", False, "Log placement of ops on devices")
tf.flags.DEFINE_string("model_name", name, "")
tf.flags.DEFINE_boolean("useConstantInit", False, "")

tf.flags.DEFINE_string("model_index", '200', "")
tf.flags.DEFINE_integer("num_splits", 8, "Split the validation set into 8 parts for a faster evaluation")
tf.flags.DEFINE_integer("testIdx", 1, "From 0 to 7. Index of one of 8 parts")
tf.flags.DEFINE_boolean("decode", True, "")

FLAGS = tf.flags.FLAGS
# FLAGS._parse_flags()
# print("\nParameters:")
# for attr, value in sorted(FLAGS.__flags.items()):
#     print("{}={}".format(attr.upper(), value))
# print("")

# Load data
print("Loading data...")

train, valid, test, words_indexes, indexes_words, \
    headTailSelector, entity2id, id2entity, relation2id, id2relation = build_data(path=FLAGS.data, name=FLAGS.name)
data_size = len(train)
train_batch = Batch_Loader(train, words_indexes, indexes_words, headTailSelector, \
                           entity2id, id2entity, relation2id, id2relation, batch_size=FLAGS.batch_size, neg_ratio=FLAGS.neg_ratio)

entity_array = np.array(list(train_batch.indexes_ents.keys()))

lstEmbed = []
if FLAGS.use_pretrained == True:
    print("Using pre-trained result.")
    lstEmbed = np.empty([len(words_indexes), FLAGS.embedding_dim]).astype(np.float32)
    initEnt, initRel = init_norm_Vector(FLAGS.data + FLAGS.name + '/relation2vec' + str(FLAGS.embedding_dim) + '.init',
                                            FLAGS.data + FLAGS.name + '/entity2vec' + str(FLAGS.embedding_dim) + '.init', FLAGS.embedding_dim)
    for _word in words_indexes:
        if _word in relation2id:
            index = relation2id[_word]
            _ind = words_indexes[_word]
            lstEmbed[_ind] = initRel[index]
        elif _word in entity2id:
            index = entity2id[_word]
            _ind = words_indexes[_word]
            lstEmbed[_ind] = initEnt[index]
        else:
            print('*****************Error********************!')
            break
    lstEmbed = np.array(lstEmbed, dtype=np.float32)

# assert len(words_indexes) % (len(entity2id) + len(relation2id)) == 0

print("Loading data... finished!")

x_valid = np.array(list(valid.keys())).astype(np.int32)
y_valid = np.array(list(valid.values())).astype(np.float32)
len_valid = len(x_valid)
batch_valid = int(len_valid / (FLAGS.num_splits - 1))

x_test = np.array(list(test.keys())).astype(np.int32)
y_test = np.array(list(test.values())).astype(np.float32)
len_test = len(x_test)
batch_test = int(len_test / (FLAGS.num_splits - 1))

# uncomment when tuning hyper-parameters on the validation set
# x_test = x_valid
# y_test = y_valid
# len_test = len_valid
# batch_test = batch_valid

##########################################

if FLAGS.decode == False:
    lstModelNames = list(FLAGS.model_name.split(","))
    for _model_name in lstModelNames:
        out_dir = os.path.abspath(os.path.join(FLAGS.run_folder, _model_name))
        print("Evaluating {}\n".format(out_dir))
        checkpoint_dir = os.path.abspath(os.path.join(out_dir, "checkpoints"))
        checkpoint_prefix = os.path.join(checkpoint_dir, name)

        lstModelIndexes = list(FLAGS.model_index.split(","))
        for _model_index in lstModelIndexes:
            _file = checkpoint_prefix + "-" + _model_index
            lstHT = []
            for _index in range(FLAGS.num_splits):
                with open(_file + '.eval.' + str(_index) + '.txt') as f:
                    for _line in f:
                        if _line.strip() != '':
                            lstHT.append(list(map(float, _line.strip().split())))
            lstHT = np.array(lstHT)
            print(_file, 'mr, mrr, hits@10 --> ',  np.sum(lstHT, axis=0)/(2 * len_test))

        print('------------------------------------')

else:
    with tf.Graph().as_default():
        tf.set_random_seed(1234)
        session_conf = tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement,
                                      log_device_placement=FLAGS.log_device_placement)
        session_conf.gpu_options.allow_growth = True
        sess = tf.Session(config=session_conf)
        with sess.as_default():
            global_step = tf.Variable(0, name="global_step", trainable=False)

            cnn = ConvKB(
                sequence_length=x_valid.shape[1],  # 3
                num_classes=y_valid.shape[1],  # 1
                pre_trained=lstEmbed,
                embedding_size=FLAGS.embedding_dim,
                filter_sizes=list(map(int, FLAGS.filter_sizes.split(","))),
                num_filters=FLAGS.num_filters,
                vocab_size=len(words_indexes),
                l2_reg_lambda=FLAGS.l2_reg_lambda,
                batch_size=(int(FLAGS.neg_ratio) + 1)*FLAGS.batch_size,
                is_trainable=FLAGS.is_trainable,
                useConstantInit=FLAGS.useConstantInit)

            # Output directory for models and summaries

            lstModelNames = list(FLAGS.model_name.split(","))

            for _model_name in lstModelNames:

                out_dir = os.path.abspath(os.path.join(FLAGS.run_folder, _model_name))
                print("Evaluating {}\n".format(out_dir))

                # Checkpoint directory. Tensorflow assumes this directory already exists so we need to create it
                checkpoint_dir = os.path.abspath(os.path.join(out_dir, "checkpoints"))
                checkpoint_prefix = os.path.join(checkpoint_dir, name)

                lstModelIndexes = list(FLAGS.model_index.split(","))

                for _model_index in lstModelIndexes:

                    _file = checkpoint_prefix + "-" + _model_index

                    cnn.saver.restore(sess, _file)
                    print("Loaded result", _file)

                    # Predict function to predict scores for test data
                    def predict(x_batch, y_batch, writer=None):
                        feed_dict = {
                            cnn.input_x: x_batch,
                            cnn.input_y: y_batch,
                            cnn.dropout_keep_prob: 1.0,
                        }
                        scores = sess.run([cnn.predictions], feed_dict)
                        return scores

                    def test_prediction(x_batch, y_batch, head_or_tail='head'):

                        hits10 = 0.0
                        mrr = 0.0
                        mr = 0.0

                        for i in range(len(x_batch)):
                            new_x_batch = np.tile(x_batch[i], (len(entity2id), 1))
                            new_y_batch = np.tile(y_batch[i], (len(entity2id), 1))
                            if head_or_tail == 'head':
                                new_x_batch[:, 0] = entity_array
                            else:  # 'tail'
                                new_x_batch[:, 2] = entity_array

                            while len(new_x_batch) % ((int(FLAGS.neg_ratio) + 1) * FLAGS.batch_size) != 0:
                                new_x_batch = np.append(new_x_batch, [x_batch[i]], axis=0)
                                new_y_batch = np.append(new_y_batch, [y_batch[i]], axis=0)

                            if head_or_tail == 'head':
                                entity_array1 = new_x_batch[:, 0]
                            else:  # 'tail'
                                entity_array1 = new_x_batch[:, 2]
                            results = []
                            listIndexes = range(0, len(new_x_batch), (int(FLAGS.neg_ratio) + 1) * FLAGS.batch_size)
                            for tmpIndex in range(len(listIndexes) - 1):
                                results = np.append(results, predict(
                                    new_x_batch[listIndexes[tmpIndex]:listIndexes[tmpIndex + 1]],
                                    new_y_batch[listIndexes[tmpIndex]:listIndexes[tmpIndex + 1]]))
                            results = np.append(results,
                                                predict(new_x_batch[listIndexes[-1]:], new_y_batch[listIndexes[-1]:]))
                            results = np.reshape(results, [entity_array1.shape[0], 1])
                            results_with_id = np.hstack(
                                (np.reshape(entity_array1, [entity_array1.shape[0], 1]), results))
                            results_with_id = results_with_id[np.argsort(results_with_id[:, 1])]
                            results_with_id = results_with_id[:, 0].astype(int)
                            _filter = 0
                            if head_or_tail == 'head':
                                for tmpHead in results_with_id:
                                    if tmpHead == x_batch[i][0]:
                                        break
                                    tmpTriple = (tmpHead, x_batch[i][1], x_batch[i][2])
                                    if (tmpTriple in train) or (tmpTriple in valid) or (tmpTriple in test):
                                        continue
                                    else:
                                        _filter += 1
                            else:
                                for tmpTail in results_with_id:
                                    if tmpTail == x_batch[i][2]:
                                        break
                                    tmpTriple = (x_batch[i][0], x_batch[i][1], tmpTail)
                                    if (tmpTriple in train) or (tmpTriple in valid) or (tmpTriple in test):
                                        continue
                                    else:
                                        _filter += 1

                            mr += (_filter + 1)
                            mrr += 1.0 / (_filter + 1)
                            if _filter < 10:
                                hits10 += 1

                        return np.array([mr, mrr, hits10])

                    if FLAGS.testIdx < (FLAGS.num_splits - 1):
                        head_results = test_prediction(x_test[batch_test * FLAGS.testIdx : batch_test * (FLAGS.testIdx + 1)],
                                                       y_test[batch_test * FLAGS.testIdx : batch_test * (FLAGS.testIdx + 1)],
                                                       head_or_tail='head')
                        tail_results = test_prediction(x_test[batch_test * FLAGS.testIdx : batch_test * (FLAGS.testIdx + 1)],
                                                       y_test[batch_test * FLAGS.testIdx : batch_test * (FLAGS.testIdx + 1)],
                                                       head_or_tail='tail')
                    else:
                        head_results = test_prediction(x_test[batch_test * FLAGS.testIdx : len_test],
                                                       y_test[batch_test * FLAGS.testIdx : len_test],
                                                       head_or_tail='head')
                        tail_results = test_prediction(x_test[batch_test * FLAGS.testIdx : len_test],
                                                       y_test[batch_test * FLAGS.testIdx : len_test],
                                                       head_or_tail='tail')

                    wri = open(_file + '.eval.' + str(FLAGS.testIdx) + '.txt', 'w')

                    for _val in head_results:
                        wri.write(str(_val) + ' ')
                    wri.write('\n')
                    for _val in tail_results:
                        wri.write(str(_val) + ' ')
                    wri.write('\n')

                    wri.close()