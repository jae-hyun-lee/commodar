import tensorflow as tf
import numpy as np
np.random.seed(1234)
import os
import time
import datetime
from builddata import *
from model import ConvKB

from tensorflow.core.protobuf import config_pb2

name = "semantic"
# Parameters
data_path = "../resource/input"
model_path = "../result"
embedding_dim = 10
num_filters = 500
learning_rate = 0.001
batch_size = 128
num_epochs = 200
saveStep = 11

# ==================================================
tf.flags.DEFINE_string("data", data_path, "Data sources.")
tf.flags.DEFINE_string("run_folder", model_path, "Data sources.")
tf.flags.DEFINE_string("name", name, "Name of the dataset.")

tf.flags.DEFINE_integer("embedding_dim", embedding_dim, "Dimensionality of character embedding")
tf.flags.DEFINE_string("filter_sizes", "1", "Comma-separated filter sizes")
tf.flags.DEFINE_integer("num_filters", num_filters, "Number of filters per filter size")
tf.flags.DEFINE_float("dropout_keep_prob", 1.0, "Dropout keep probability")
tf.flags.DEFINE_float("l2_reg_lambda", 0.001, "L2 regularization lambda")
tf.flags.DEFINE_float("learning_rate", learning_rate, "Learning rate")
tf.flags.DEFINE_boolean("is_trainable", True, "")
tf.flags.DEFINE_integer("batch_size", batch_size, "Batch Size")
tf.flags.DEFINE_float("neg_ratio", 1.0, "Number of negative triples generated by positive")
tf.flags.DEFINE_boolean("use_pretrained", False, "Using the pretrained embeddings")
tf.flags.DEFINE_integer("num_epochs", num_epochs, "Number of training epochs")
tf.flags.DEFINE_integer("saveStep", saveStep, "")
tf.flags.DEFINE_boolean("allow_soft_placement", True, "Allow device soft device placement")
tf.flags.DEFINE_boolean("log_device_placement", False, "Log placement of ops on devices")
tf.flags.DEFINE_string("model_name", name, "")
tf.flags.DEFINE_boolean("useConstantInit", False, "")

FLAGS = tf.flags.FLAGS
init_time = time.time()


def measure():
    global init_time
    after_time = time.time()
    dif_time = after_time - init_time
    hour = int(dif_time / 3600)
    min = int((dif_time - hour * 3600) / 60)
    sec = dif_time - hour * 3600 - min * 60
    print('Processing Time: ' + str(hour) + "hour " + str(min) + "min " + str(sec) + "sec ")


# double GPU from <https://github.com/golbin/TensorFlow-Multi-GPUs/blob/master/two-GPUs.py>
from tensorflow.python.client import device_lib
def get_available_gpus():
    local_devices = device_lib.list_local_devices()
    return [x.name for x in local_devices if x.device_type == 'GPU']

log_device_placement = False

gpu_names = get_available_gpus()
gpu_num = len(gpu_names)

print('{0} GPUs are detected.'.format(gpu_num))

device1 = gpu_names[0]
device2 = gpu_names[1] if int(gpu_num) == 2 else device1
print('device1: {0}'.format(device1))
print('device2: {0}'.format(device2))


# Load data
print("Loading data...")

train, valid, test, words_indexes, indexes_words, \
    headTailSelector, entity2id, id2entity, relation2id, id2relation = build_data(path=FLAGS.data, name=FLAGS.name)
data_size = len(train)
train_batch = Batch_Loader(train, words_indexes, indexes_words, headTailSelector, \
                           entity2id, id2entity, relation2id, id2relation, batch_size=FLAGS.batch_size, neg_ratio=FLAGS.neg_ratio)

entity_array = np.array(list(train_batch.indexes_ents.keys()))

lstEmbed = []
if FLAGS.use_pretrained == True:
    print("Using pre-trained result.")
    lstEmbed = np.empty([len(words_indexes), FLAGS.embedding_dim]).astype(np.float32)
    initEnt, initRel = init_norm_Vector(FLAGS.data + FLAGS.name + '/relation2vec' + str(FLAGS.embedding_dim) + '.init',
                                            FLAGS.data + FLAGS.name + '/entity2vec' + str(FLAGS.embedding_dim) + '.init', FLAGS.embedding_dim)
    for _word in words_indexes:
        if _word in relation2id:
            index = relation2id[_word]
            _ind = words_indexes[_word]
            lstEmbed[_ind] = initRel[index]
        elif _word in entity2id:
            index = entity2id[_word]
            _ind = words_indexes[_word]
            lstEmbed[_ind] = initEnt[index]
        else:
            print('*****************Error********************!')
            break
    lstEmbed = np.array(lstEmbed, dtype=np.float32)
print("Loading data... finished!")
measure()

x_valid = np.array(list(valid.keys())).astype(np.int32)
y_valid = np.array(list(valid.values())).astype(np.float32)

x_test = np.array(list(test.keys())).astype(np.int32)
y_test = np.array(list(test.values())).astype(np.float32)

# Training
# ==================================================
with tf.Graph().as_default():
    tf.set_random_seed(1234)
    session_conf = tf.ConfigProto(allow_soft_placement=FLAGS.allow_soft_placement, log_device_placement=FLAGS.log_device_placement)
    session_conf.gpu_options.allow_growth = False
    session_conf.gpu_options.per_process_gpu_memory_fraction = 0.9
    sess = tf.Session(config=session_conf)
    with sess.as_default():
        global_step = tf.Variable(0, name="global_step", trainable=False)
        cnn = ConvKB(
            sequence_length=x_valid.shape[1], #3
            num_classes=y_valid.shape[1], #1
            pre_trained=lstEmbed,
            embedding_size=FLAGS.embedding_dim,
            filter_sizes=list(map(int, FLAGS.filter_sizes.split(","))),
            num_filters=FLAGS.num_filters,
            vocab_size=len(words_indexes),
            l2_reg_lambda=FLAGS.l2_reg_lambda,
            batch_size=(int(FLAGS.neg_ratio) + 1)*FLAGS.batch_size,
            is_trainable=FLAGS.is_trainable,
            useConstantInit=FLAGS.useConstantInit)

        # Define Training procedure
        optimizer = tf.train.AdamOptimizer(learning_rate=FLAGS.learning_rate)
        grads_and_vars = optimizer.compute_gradients(cnn.loss)
        train_op = optimizer.apply_gradients(grads_and_vars, global_step=global_step)
   
        # Keep track of gradient values and sparsity (optional)
        grad_summaries = []
        for g, v in grads_and_vars:
            if g is not None:
                grad_hist_summary = tf.summary.histogram("{}/grad/hist".format(v.name), g)
                sparsity_summary = tf.summary.scalar("{}/grad/sparsity".format(v.name), tf.nn.zero_fraction(g))
                grad_summaries.append(grad_hist_summary)
                grad_summaries.append(sparsity_summary)
        grad_summaries_merged = tf.summary.merge(grad_summaries)
   
        # Output directory for models and summaries

        out_dir = os.path.abspath(os.path.join(FLAGS.run_folder, FLAGS.model_name))
        print("Writing to {}\n".format(out_dir))
        measure()

        # Summaries for loss and accuracy
        loss_summary = tf.summary.scalar("loss", cnn.loss)

        # Train Summaries
        train_summary_op = tf.summary.merge([loss_summary, grad_summaries_merged])
        train_summary_dir = os.path.join(out_dir, "summaries", "train")
        train_summary_writer = tf.summary.FileWriter(train_summary_dir, sess.graph)

        # Dev summaries
        dev_summary_op = tf.summary.merge([loss_summary])
        dev_summary_dir = os.path.join(out_dir, "summaries", "dev")
        dev_summary_writer = tf.summary.FileWriter(dev_summary_dir, sess.graph)

        test_summary_op = tf.summary.merge([loss_summary])
        test_summary_dir = os.path.join(out_dir, "summaries", "test")
        test_summary_writer = tf.summary.FileWriter(test_summary_dir, sess.graph)
   
        # Checkpoint directory. Tensorflow assumes this directory already exists so we need to create it
        checkpoint_dir = os.path.abspath(os.path.join(out_dir, "checkpoints"))
        checkpoint_prefix = os.path.join(checkpoint_dir, name)
        if not os.path.exists(checkpoint_dir):
            os.makedirs(checkpoint_dir)

        # Initialize all variables
        sess.run(tf.global_variables_initializer(), options=config_pb2.RunOptions(report_tensor_allocations_upon_oom=True))
         
        def train_step(x_batch, y_batch):
            """
            A single training step
            """
            feed_dict = {
              cnn.input_x: x_batch,
              cnn.input_y: y_batch,
              cnn.dropout_keep_prob: FLAGS.dropout_keep_prob,
            }
            _, step, loss = sess.run([train_op, global_step, cnn.loss], feed_dict)

        num_batches_per_epoch = int((data_size - 1) / FLAGS.batch_size) + 1
        for epoch in range(FLAGS.num_epochs):
            print("{}th epoch".format(epoch + 1))
            for batch_num in range(num_batches_per_epoch):
                x_batch, y_batch = train_batch()
                train_step(x_batch, y_batch)
                current_step = tf.train.global_step(sess, global_step)

            if epoch > 0:
                if epoch % (FLAGS.saveStep - 1) == 0:
                    path = cnn.saver.save(sess, checkpoint_prefix, global_step=epoch + 1)
                    print("Saved result checkpoint to {}\n".format(path))

                    # writing a lookup table and its index
                    from tensorflow.python import pywrap_tensorflow

                    reader = pywrap_tensorflow.NewCheckpointReader(checkpoint_prefix + '-' + str(epoch + 1))
                    np.save(checkpoint_prefix + ".npy", reader.get_tensor('embedding/W'))

                    manipulatedData = open(checkpoint_prefix + ".vocab", 'w+');
                    strNewRow = ' '.join(words_indexes)
                    manipulatedData.write(strNewRow)
                    manipulatedData.close()
measure()


